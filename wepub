#!/bin/bash

# Copyright (c) 2011, Patrick Rondon
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer. Redistributions
# in binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Utilities

function dieIfFailed {
    if [ $? -ne 0 ]; then
        echo "Failure: $1"
        exit $2
    fi
}

function checkDependency {
    which -s $1
    dieIfFailed "Could not find required program $1; please install $2" 1
}

# Check we can even run

checkDependency "ebook-convert" "Calibre (http://calibre-ebook.com/)"
checkDependency "curl" "cURL (http://curl.haxx.se/)"
checkDependency "w3hxselect" "html-xml-utils (http://www.w3.org/Tools/HTML-XML-utils/)"

# Parse parameters

USAGE="Usage: $0 [-t title] output.epub [Wikipedia URL list]"

while getopts :ht: opt; do
    case $opt in
        h) echo "$USAGE"; exit 0;;
        t) TITLE="$OPTARG";;
        ?) echo "Unrecognized option: $opt"; echo "$USAGE"; exit 1;;
    esac
done

shift $(($OPTIND - 1))

if [ "$#" -lt 2 ]; then
    echo "Too few arguments."
    echo "$USAGE"
    exit 1
fi

BASE=`basename "$1" ".epub"`
OUTFILE="$BASE.epub"
TMPDIR=`mktemp -d -t wepub`
TMP="$TMPDIR/wepub.html"

if [ -z "$TITLE" ]; then
    TITLE="$BASE"
fi

shift

# Fetch URLs and merge contents into a single HTML file

echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml">
<body>' > "$TMP"

for url in $@; do
      curl "$url" -s -o - \
    | w3hxselect "#content" \
    | w3hxprune -c "thumb tright" \
      >> "$TMP"
    dieIfFailed "Could not download $url" 2
done

echo '</html></body>' >> "$TMP"

# Convert into EPUB

ebook-convert "$TMP" "$OUTFILE" \
    --no-default-epub-cover \
    --smarten-punctuation \
    --level1-toc '//*[@class="firstHeading"]' \
    --output-profile kindle \
    --max-levels 0 \
    --authors "Wikipedia" \
    --title "$TITLE"

dieIfFailed "Could not convert to EPUB." 3